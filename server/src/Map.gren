module Map exposing ( T, init, pop )



type alias Entry key value =
    { key : key
    , value : value
    }


type alias T key value =
    Array (Entry key value)


init : T key value
init =
    []


pop :
    (Entry key value -> Bool)
    -> T
    -> { popped : Maybe Entry key value
       , map : T
       }
pop where_ map =
    Array.foldl
        (\entry agg ->
            case agg.popped of
                Just _ ->
                    agg

                Nothing ->
                    case where_ entry of
                        True ->
                            { popped = Just entry
                            , map = agg.map
                            }

                        False ->
                            { popped = agg.popped
                            , map = Array.push entry agg.map
                            }
        )
        { popped = Nothing
        , map = init
        }
        map
